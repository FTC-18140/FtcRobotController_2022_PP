Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Thunderbot.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* Copyright (c) 2022 FIRST. All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted (subject to the limitations in the disclaimer below) provided that\r\n * the following conditions are met:\r\n *\r\n * Redistributions of source code must retain the above copyright notice, this list\r\n * of conditions and the following disclaimer.\r\n *\r\n * Redistributions in binary form must reproduce the above copyright notice, this\r\n * list of conditions and the following disclaimer in the documentation and/or\r\n * other materials provided with the distribution.\r\n *\r\n * Neither the name of FIRST nor the names of its contributors may be used to endorse or\r\n * promote products derived from this software without specific prior written permission.\r\n *\r\n * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS\r\n * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\r\n * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\n * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\n * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\n * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\n * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\npackage org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\nimport com.qualcomm.robotcore.hardware.HardwareMap;\r\nimport com.qualcomm.robotcore.hardware.Servo;\r\nimport com.qualcomm.robotcore.util.Range;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.Telemetry;\r\n\r\n/**\r\n *\r\n * This file defines a Java Class that performs all the setup and configuration for the robot's hardware like motors,\r\n * sensors, and webcams.\r\n *\r\n */\r\n\r\npublic class Thunderbot\r\n{\r\n\r\n    /* Declare OpMode members. */\r\n    private HardwareMap myHWMap = null;   // gain access to HardwareMap in the calling OpMode.\r\n    private Telemetry myTelem = null;    // gain access to Telemetry in the calling OpMode\r\n\r\n    // Define Motor and Servo objects  (Make them private so they can't be accessed externally)\r\n    private DcMotor leftDrive   = null;\r\n    private DcMotor rightDrive  = null;\r\n    private DcMotor armMotor = null;\r\n    private Servo   leftHand = null;\r\n    private Servo   rightHand = null;\r\n\r\n    Eyes theWebcam = new Eyes();\r\n\r\n    // Define Drive constants.  Make them public so they CAN be used by the calling OpMode\r\n    public static final double MID_SERVO       =  0.5 ;\r\n    public static final double HAND_SPEED      =  0.02 ;  // sets rate to move servo\r\n    public static final double ARM_UP_POWER    =  0.45 ;\r\n    public static final double ARM_DOWN_POWER  = -0.45 ;\r\n\r\n    // Define a constructor that allows the OpMode to pass a reference to itself.\r\n    public Thunderbot(HardwareMap theOpModeHWMap, Telemetry theOpModeTelem) {\r\n        myHWMap = theOpModeHWMap;\r\n        myTelem = theOpModeTelem;\r\n    }\r\n\r\n    /**\r\n     * Initialize all the robot's hardware.\r\n     * This method must be called ONCE when the OpMode is initialized.\r\n     *\r\n     * All of the hardware devices are accessed via the hardware map, and initialized.\r\n     */\r\n    public void init()    {\r\n        // Define and Initialize Motors (note: need to use reference to actual OpMode).\r\n        leftDrive  = myHWMap.get(DcMotor.class, \"left_drive\");\r\n        rightDrive = myHWMap.get(DcMotor.class, \"right_drive\");\r\n        armMotor   = myHWMap.get(DcMotor.class, \"arm\");\r\n\r\n        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.\r\n        // Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.\r\n        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips\r\n        leftDrive.setDirection(DcMotor.Direction.REVERSE);\r\n        rightDrive.setDirection(DcMotor.Direction.FORWARD);\r\n\r\n        // If there are encoders connected, switch to RUN_USING_ENCODER mode for greater accuracy\r\n        // leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n        // rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);\r\n\r\n        // Define and initialize ALL installed servos.\r\n        leftHand = myHWMap.get(Servo.class, \"left_hand\");\r\n        rightHand = myHWMap.get(Servo.class, \"right_hand\");\r\n        leftHand.setPosition(MID_SERVO);\r\n        rightHand.setPosition(MID_SERVO);\r\n\r\n        // Initialize the webcam\r\n        theWebcam.init(myHWMap);\r\n\r\n        // All done!\r\n        myTelem.addData(\">\", \"Hardware Initialized\");\r\n        myTelem.update();\r\n    }\r\n\r\n    /**\r\n     * Calculates the left/right motor powers required to achieve the requested\r\n     * robot motions: Drive (Axial motion) and Turn (Yaw motion).\r\n     * Then sends these power levels to the motors.\r\n     *\r\n     * @param Drive     Fwd/Rev driving power (-1.0 to 1.0) +ve is forward\r\n     * @param Turn      Right/Left turning power (-1.0 to 1.0) +ve is CW\r\n     */\r\n    public void driveRobot(double Drive, double Turn) {\r\n        // Combine drive and turn for blended motion.\r\n        double left  = Drive + Turn;\r\n        double right = Drive - Turn;\r\n\r\n        // Scale the values so neither exceed +/- 1.0\r\n        double max = Math.max(Math.abs(left), Math.abs(right));\r\n        if (max > 1.0)\r\n        {\r\n            left /= max;\r\n            right /= max;\r\n        }\r\n\r\n        // Use existing function to drive both wheels.\r\n        setDrivePower(left, right);\r\n    }\r\n\r\n    /**\r\n     * Pass the requested wheel motor powers to the appropriate hardware drive motors.\r\n     *\r\n     * @param leftWheel     Fwd/Rev driving power (-1.0 to 1.0) +ve is forward\r\n     * @param rightWheel    Fwd/Rev driving power (-1.0 to 1.0) +ve is forward\r\n     */\r\n    public void setDrivePower(double leftWheel, double rightWheel) {\r\n        // Output the values to the motor drives.\r\n        leftDrive.setPower(leftWheel);\r\n        rightDrive.setPower(rightWheel);\r\n    }\r\n\r\n    /**\r\n     * Pass the requested arm power to the appropriate hardware drive motor\r\n     *\r\n     * @param power driving power (-1.0 to 1.0)\r\n     */\r\n    public void setArmPower(double power) {\r\n        armMotor.setPower(power);\r\n    }\r\n\r\n    /**\r\n     * Send the two hand-servos to opposing (mirrored) positions, based on the passed offset.\r\n     *\r\n     * @param offset\r\n     */\r\n    public void setHandPositions(double offset) {\r\n        offset = Range.clip(offset, -0.5, 0.5);\r\n        leftHand.setPosition(MID_SERVO + offset);\r\n        rightHand.setPosition(MID_SERVO - offset);\r\n    }\r\n\r\n    public int getSignalZone()\r\n    {\r\n        return theWebcam.stageSwitchingPipeline.getSignalZone();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Thunderbot.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Thunderbot.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Thunderbot.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Thunderbot.java	
@@ -77,21 +77,23 @@
      *
      * All of the hardware devices are accessed via the hardware map, and initialized.
      */
-    public void init()    {
+    public void init(HardwareMap hwMap, Telemetry telem)    {
+        myHWMap = hwMap;
+        myTelem = telem;
         // Define and Initialize Motors (note: need to use reference to actual OpMode).
         leftDrive  = myHWMap.get(DcMotor.class, "left_drive");
         rightDrive = myHWMap.get(DcMotor.class, "right_drive");
         armMotor   = myHWMap.get(DcMotor.class, "arm");
 
-        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
-        // Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.
+       //  To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
+       //  Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.
         // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
         leftDrive.setDirection(DcMotor.Direction.REVERSE);
         rightDrive.setDirection(DcMotor.Direction.FORWARD);
 
-        // If there are encoders connected, switch to RUN_USING_ENCODER mode for greater accuracy
-        // leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
-        // rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
+         //If there are encoders connected, switch to RUN_USING_ENCODER mode for greater accuracy
+         leftDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
+         rightDrive.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
 
         // Define and initialize ALL installed servos.
         leftHand = myHWMap.get(Servo.class, "left_hand");
@@ -100,6 +102,7 @@
         rightHand.setPosition(MID_SERVO);
 
         // Initialize the webcam
+
         theWebcam.init(myHWMap);
 
         // All done!
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Eyes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode;\r\n\r\nimport com.qualcomm.robotcore.hardware.HardwareMap;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;\r\nimport org.opencv.core.Core;\r\nimport org.opencv.core.Mat;\r\nimport org.opencv.core.MatOfPoint;\r\nimport org.opencv.core.Scalar;\r\nimport org.opencv.imgproc.Imgproc;\r\nimport org.openftc.easyopencv.OpenCvCamera;\r\nimport org.openftc.easyopencv.OpenCvCameraFactory;\r\nimport org.openftc.easyopencv.OpenCvCameraRotation;\r\nimport org.openftc.easyopencv.OpenCvPipeline;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class Eyes\r\n{\r\n\r\n    OpenCvCamera phoneCam;\r\n    StageSwitchingPipeline stageSwitchingPipeline;\r\n\r\n    public void init(HardwareMap hardwareMap)\r\n    {\r\n        phoneCam = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, \"Webcam 1\"));\r\n\r\n        stageSwitchingPipeline = new StageSwitchingPipeline();\r\n        phoneCam.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()\r\n        {\r\n            @Override\r\n            public void onOpened()\r\n            {\r\n                phoneCam.setPipeline(stageSwitchingPipeline);\r\n                phoneCam.startStreaming(640, 480, OpenCvCameraRotation.UPRIGHT);\r\n            }\r\n\r\n            @Override\r\n            public void onError(int errorCode)\r\n            {\r\n                /*\r\n                 * This will be called if the camera could not be opened\r\n                 */\r\n            }\r\n        });\r\n\r\n    }\r\n    /*\r\n     * With this pipeline, we demonstrate how to change which stage of\r\n     * is rendered to the viewport when the viewport is tapped. This is\r\n     * particularly useful during pipeline development. We also show how\r\n     * to get data from the pipeline to your OpMode.\r\n     */\r\n    static class StageSwitchingPipeline extends OpenCvPipeline\r\n    {\r\n        Mat yCbCrChan2Mat = new Mat();\r\n        Mat thresholdMat = new Mat();\r\n        Mat contoursOnFrameMat = new Mat();\r\n        List<MatOfPoint> contoursList = new ArrayList<>();\r\n        int signalZone;\r\n\r\n        @Override\r\n        public Mat processFrame(Mat input)\r\n        {\r\n            contoursList.clear();\r\n\r\n            /*\r\n             * This pipeline finds the contours of yellow blobs such as the Gold Mineral\r\n             * from the Rover Ruckus game.\r\n             */\r\n            Imgproc.cvtColor(input, yCbCrChan2Mat, Imgproc.COLOR_RGB2YCrCb);\r\n            Core.extractChannel(yCbCrChan2Mat, yCbCrChan2Mat, 2);\r\n            Imgproc.threshold(yCbCrChan2Mat, thresholdMat, 102, 255, Imgproc.THRESH_BINARY_INV);\r\n\r\n            Imgproc.findContours(thresholdMat, contoursList, new Mat(), Imgproc.RETR_LIST, Imgproc.CHAIN_APPROX_SIMPLE);\r\n            signalZone = contoursList.size();\r\n\r\n            input.copyTo(contoursOnFrameMat);\r\n            Imgproc.drawContours(contoursOnFrameMat, contoursList, -1, new Scalar(0, 0, 255), 3, 8);\r\n\r\n            return contoursOnFrameMat;\r\n\r\n        }\r\n\r\n        protected int getSignalZone()\r\n        {\r\n            return signalZone;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Eyes.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Eyes.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Eyes.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/Eyes.java	
@@ -1,11 +1,13 @@
 package org.firstinspires.ftc.teamcode;
 
+import com.qualcomm.robotcore.eventloop.opmode.Disabled;
 import com.qualcomm.robotcore.hardware.HardwareMap;
 
 import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
 import org.opencv.core.Core;
 import org.opencv.core.Mat;
 import org.opencv.core.MatOfPoint;
+import org.opencv.core.Point;
 import org.opencv.core.Scalar;
 import org.opencv.imgproc.Imgproc;
 import org.openftc.easyopencv.OpenCvCamera;
@@ -33,7 +35,7 @@
             public void onOpened()
             {
                 phoneCam.setPipeline(stageSwitchingPipeline);
-                phoneCam.startStreaming(640, 480, OpenCvCameraRotation.UPRIGHT);
+                phoneCam.startStreaming(432, 240, OpenCvCameraRotation.UPRIGHT);
             }
 
             @Override
@@ -79,6 +81,16 @@
             input.copyTo(contoursOnFrameMat);
             Imgproc.drawContours(contoursOnFrameMat, contoursList, -1, new Scalar(0, 0, 255), 3, 8);
 
+
+            Imgproc.rectangle(
+                    contoursOnFrameMat,
+                    new Point(
+                            input.cols()/4,
+                            input.rows()/4),
+                    new Point(
+                            input.cols()*(3f/4f),
+                            input.rows()*(3f/4f)),
+                    new Scalar(0, 255, 0), 4);
             return contoursOnFrameMat;
 
         }
